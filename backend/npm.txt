NPM
package manager → instead of having to make sure we have all dependencies whenever we set up a project on a new computer, the package manager installs everything for you.

Node Package Manager (npm) → command-line tool used by developers to share and control modules (or packages) of JavaScript code written for use with Node.js.

package.json file → lists the package dependencies of the project. Generated when starting a new project.

node_modules → where the packages are saved. Can be saved locally within a project's own node_modules, or in a root node_modules folder, accessible by all projects. Most developers prefer to install packages local to each project to create separation between the dependencies of different projects.


PACKAGES
Local packages → contained by a node_modules folder under your main project directory and will be accessible by only your project.
Global packages → installed at a single place in your system irrespective of the place where you execute your install command.

In general, it is a good practice to install the packages locally.

Install package:
npm install [options] <package-name>
	-g → install package globally.
	--dev → install as a development package.

Check how many global packages you have in your system:
npm list -g --depth 0

Uninstall a package:
npm uninstall <package-name>

Run a script:
npm run <script-name>

Publish a module to npm:
npm publish
	It's required for you to have an account on npmjs.com


PACKAGE.JSON
* → stores information about the project.
? → single JSON object. There are two required fields: "name" and "version", but it's good practice to provide additional information about your project that could be useful to future users or maintainers.
. → stored on the project's root

	"name" → name of the project provided by the user.
	"author" → string or object. Specify who created the project. Can provide contact details, or other details.
	"contributors" → string or object. The people who contributed for the project.
	"description" → string. Short, but informative description about the project. If you publish your project to npm, this is the string that should sell your idea to the user. It's also great way to summarize what a project does.
	"keywords" → array of strings used to describe your project using related keywords.
	"private" → if set to true prevents the app/package to be accidentally published on npm.
	"version" → string. Describes the current version of the project.
	"homepage" → string. sets the package homepage.
	"main" → points to the entry point/file of application.
	"scripts" → object. Defines a set of node scripts you can run. There scripts are command line applications. You can run them by calling npm run XXX.
	"license" → string. Inform users of what they are allowed to do with your project.
	"dependencies" → object. Contains a key-value pair of the dependency and its version that the project requires. e.g. "express": "4.14.0"
	"devDependencies" → object. Dependencies that are used only in the development part of the app.
	"engines" → object. Sets which versions of Node this package/app works on
	"browserslist" → array. It's used to tell which browsers (and their versions) you want to support. It's referenced by Babel, Autoprefixer, and other tools, to only add the polyfills and fallbacks needed to the browsers you target.
	"repository" → string. Specifies where this package repository is located.
		e.g. "repository": "github:flaviocopes/testing"
	"bugs" → URL and email where the bugs in the application should be reported.

x → if you want to remove a dependency, just remove the corresponding key-value pair for that package from your dependencies. Same method for other fields.

Semantic Versioning (SemVer)
* → industry standard for software versioning. Everything published on npm should use SemVer.

"package": "MAJOR.MINOR.PATCH"
MAJOR → when making incompatible API changes
MINOR → when you add functionality in a backwards-compatible manner
PATCH → when you make backwards-compatible bug fixes.

Dependencies Versions
"2.15.0" → only include a specific version of a package.
"~2.15.0" → allows the dependency to update to the latest PATCH version
"^2.15.0" → allows the dependency to update to the latest MINOR and PATCH versions
"*2.15.0" → allows the dependency to update to the latest MAJOR, MINOR and PATCH versions.
> → accept any version height than the one you specify
>= → accept any version equal to or higher than the one you specify
<= → accept any version equal or lower to the one you specify
< → accept any version lower to the one you specify
latest → latest version available
