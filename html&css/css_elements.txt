CSS SELECTORS
Universal Selector -> Applies to all elements in the document
	Ex: * {}
Type Selector -> Matches element names
	Ex: h1, h2, h3 {}
Class Selector -> Matches an element whose class attribute has a value that matches the one specified after the period symbol
	Ex: .note {}
	    p.note {}
ID Selector -> Matches an element whose id attribute has a value that matches the one specified after the pound or hash symbol
	Ex: #introduction {}
Child Selector -> Matches an element that is a direct child of another
	Ex: li>a {}
		Targets any <a> elements that are children of an <li> element, but not other <a> elements in the page
Descendant Selector -> Matches an element that is a descendent of another specified element (not just a direct child of that element)
	Ex: p a {}
Adjacent Sibling -> Matches an element that is the next sibling of another
	Ex: h1+p {}
		Targets the first <p> element after any <h1> element
General Sibling Selector -> Matches an element that is a sibling of another, although it does not have to be the directly preceding element
	Ex: h1~p {}

================================================
ATTRIBUTE SELECTORS
Existence -> [] Matches a specific attribute (whatever its value)
	Ex: p[class]
Equality -> [=] Matches a specific attribute with a specific value
	Ex: p[class="dog"]
Space -> [~=] Matches a specific attribute whose value appears in a space-separated list of words
	Ex: p[class~="dog"]
		Targets any <p> element with an attribute called class whose value is a list of space-separated words, one of which is dog
Prefix -> [^=] Matches a specific attribute whose value begins with a specific string
	Ex: p[attr^"d"]
		Targets any <p> element with an attribute whose value begins with the letter "d"
Substring -> [*=] Matches a specific attribute whose value contains a specific substring
	Ex: p[attr*"do"]
		Targets any <p> element with an attribute whose value contains the letters "do"
Suffix -> [$=] Matches a specific attribute whose value ends with a specific string
	Ex: p[attr$"g"]
		Targets any <p> element with an attribute whose value ends with the letter "g"

================================================
INHERITANCE
You can force a lot of properties to inherit values from their parent elements by using inherit for the value of the properties using the inherit property.

================================================
COLOR
Color names
RGB Values
Hex Codes
HSL
	. Hue - color in a circle. The value is the angle.
	. Saturation - the amount of gray
	. Lightness - amount of white or black in color


LINEAR GRADIENT
Accessed through the  background property's linear-gradient() function.
	background: linear-gradient(gradient_direction, color1, color2, color3, ...);
The gradient_direction specifies the direction from which color transition starts. It can be stated as a degree, where 90deg makes a vertical gradient and a 45deg is angled like a backslash.

	Create a Striped Element
The repeating-linear-gradient() is similar to linear-gradient() with the major difference that it repeats the specified gradient pattern. It accepts a variety of values.

background: repeating-linear-gradient(
	90deg,
	yellow 0px,
	blue 40px,
	green 40px,
	red 80px
);

The gradient starts with the color yellow at 0 pixels which blends into the second color blue at 40 pixels away from the start. Since the next color stop is also at 40 pixels, the gradient immediately changes to the third color green, which itself blends into the fourth color value red as that is 80 pixels away from the beginning of the gradient.

================================================
FONTS
TYPEFACES
Serif
Sans-serif
Monospace
Cursive
Fantasy - designed for titles

SIZE
Pixels - px
Percentages - relative to the parent element
em - is equivalent to the width of a letter m
rem

vw - relative to viewport's width
vh - relative to viewport's height
vmin - relative to the viewport's smaller dimension (height vs. width)
vmax - relative to the viewport's bigger dimension (height vs. width)

@font-face
Allows you to use a font, even if it is not installed on the computer of the person browsing, by allowing you to specify a path to a copy of the font, which will be downloaded if it is not on the uses's machine.
	font-family -> specifies the name of the font. This name can then be used as a value of the font-family property in the rest of the style sheet.
	src -> specifies the path to the font
	format -> specifies the format that the font is supplied in.

www.fontsquirrel.com
www.fontex.org
www.openfontlibrary.org
www.google.com/webfonts

SOME PROPERTIES
font-weight
	normal
	bold
	or numeric value

font-style
	normal
	italic
	oblique

text-transform
	uppercase
	lowercase
	capitalize -> the first letter of each word to appear capitalized
	initial -> use default mode
	none -> (default) use the original text

text-decoration
	none
	underline
	overline -> adds a line over the top of the text
	line-through -> adds a line through words
	blink -> animates the text to make it flash on and off

line-height -> sets the height of an entire line of text. Increasing the line-height makes the vertical gap between lines of text larger. A good starter setting is around 1.4 to 1.5em.

letter-spacing -> control the space between each letter
word-spacing -> control the space between each word

text-align
	left
	right
	center
	justify

vertical-align -> it is more commonly used with inline elements such as <img>, <em>, or <strong> elements. When used with this elements performs a task very similar to the HTML align attribute used on the <img> element.
	baseline
	sub
	super
	top
	text-top
	middle
	bottom
	text-bottom
	You can also take a length (usually specified in pixels or ems) or a percentage of the line height.

text-indent -> allows you to indent the first line of text within a element, usually in pixels or ems.

text-shadow -> used to create a drop shadow, which is a dark version of the word just behind it and slightly offset. It can take three lengths and a color for the drop shadow.
	The first length indicates how far to the left or right the shadow should fall.
	The second value indicates the distance to the top or bottom that the shadow should fall.
	The third value is optional and specifies the amount of blur that should be applied to the top shadow.
	The fourth value is the color of the drop shadow.

PSEUDO-ELEMENTS FOR TEXT
:first-letter
:first-line

PSEUDO-CLASSES FOR LINKS
:link -> links that have not yet been visited
:visited -> links that have been clicked on

:hover -> applied when a user hovers over an element with a pointing device such as a mouse.
:active -> applied when an element is being activated by a user, for example when a button is being pressed or a link being clicked.
:focus -> applied when an element has focus. Focus occurs when a browser discovers that you are ready to interact with an element on the page. For example, when your cursor is in a form input ready to accept typing.

================================================
BOXES
overflow -> tells the browser what to do if the content contained within a box is larger that the box itself

box-shadow -> applies one or more shadows to an element. Takes values for offset-x (how far to push the shadow horizontally from the element), offset-y (how far to push the shadow vertically from the element), blur-radius, spread-radius and a color value, in that order. The bluer-radius and spread-radius are optional.
	E.g: box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);


TRANSFORM PROPERTY
With this property you can scale, move, rotate, skew, etc your elements.

-> SCALE
To change the scale of an element, you can use the transform property, along with its scale() function.

	transform:scale(2);

-> SKEW
Skews the selected element alont its X (horizontal) or Y (vertical) axis by a given degree.

	transform:skewX(-32deg);
	transform:skewY(10deg);

================================================
POSITION
relative -> specify how CSS should move it relative to its current position in the normal flow of the page. It pairs with left, right, top and bottom properties. It doesn't remove the element from the normal flow - other elements around it still behave as if that item were in its default position.

absolute -> locks the element in place relative to its parent container. This removes the element from the normal flow of the document, so surrounding items ignore it. The CSS offset properties (top, bottom, left and right) are used to adjust the position;
	The element will be locked relative to its closest positioned ancestor. If you forget to add a position rule to the parent item (typically done using position: relative;), the browser will keep looking up the chain and ultimately default to the body tag.

fixed -> a type of absolute positioning that locks an element relative to the browser window. Removes the element from the normal flow of the page. The element won't move as the user scrolls.


FLOAT
Floating elements are removed from the normal flow of a document and pushed to either the left or right of their containing parent element.

================================================
LISTS
list-style-type -> control the shape or style of a bullet point. It can be used on rules that apply to the <ol>, <ul> and <li>.
	Unordered lists: none, disc, circle, square
	Ordered lists: decimal, decimal-leading-zero, lower-alpha, upper-alpha, lower-roman, upper-roman

list-style-position -> indicates whether the marker should appear on the inside or the outside of the box containing the main points.
	outside -> sits to the left of the block of text (default)
	inside -> sits inside the box of text

list-style -> shorthand for list styles

================================================
TABLE
. Give cells padding
. Distinguish headings
. Shade alternate rows
. Align numerals to the right

empty-cells -> specify whether or not their borders should be shown.
	show
	hide
	inherit -> if you have one table nested inside another, this instructs the table cells to obey the rules of the containing table.

border-spacing -> control the distance between adjacent cells.
border-collapse -> collapse adjacent borders to prevent the width of lines be twice that of the outside edges.
	collapse
	separate

================================================
FORMS
It is hard to get select boxes, radio buttons, and checkboxes to look consistent across all browsers. To achieve this, you might like to download te CSS files available at http://formalize.me. The author of this website has done the hard work of making forms look consistent across browsers.

================================================
CUSOR STYLES
cursor -> allows to control the type of mouse cursor that should be displayed to users.
	auto
	crosshair
	default
	pointer
	move
	text
	wait
	help
	url("cursor.gif")

================================================
MULTIBLE STYLE SHEETS
@import url("example.css")
It should appear before the other rules

================================================
IMAGES
Whenever you use consistently sized images  across a site, you can use CSS to control the dimensions of the images, instead of putting the dimensions in the HTML.
First you need to determine the sizes of the images that will be used commonly throughout the site, then give each size a name. For example: small, medium, large.

Float is being increasingly used to align images. There are two ways that this is commonly achieved:
	1: The float property is added to the class that was created to represent the tize of the image.
	2: New classes are created with names such as align-left or align-right to align the images to the left or right of the page.
It is also comon to ad da margin to the image to ensure that the text does not touch their edges.

	BACKGROUND IMAGES
background-image

background-repeat
	repeat -> the background image is repeated both horizontally and vertically.
	repeat-x -> the image is repeated horizontally only.
	repeat-y -> the image is repeated vertically only.
	no-repeat -> the image is only shown once.

background attachment -> specifies whether a background image should stay in one position or move as the user scrolls up and down the page.
	fixed -> stays in the same position on the page
	scroll -> moves up and down as the user scrolls up and down the page.

background-position -> when an image is not being  repeated, you can use the background-position property to specify where in the browser window the background image should be placed.

background -> acts like a shorthand for all of the other background properties, also the background-color property. It must be specified in the following order, but you can miss any value if you do not want to specify it:
	1: background-color
	2: background-image
	3: background-repeat
	4: background-attachment
	5: background-position
	
The background property supports the url() function in order to link an image of the chosen texture or pattern.
	background: url(link-to-the-image.png);
	

IMAGE ROLLOVER
Changes the image when the mouse hovers it, using the :hover property. Can be used in conjunction with image sprites.

IMAGE SPRITES
An image sprite is a collection of images put into a single image. A webpage with many images can take a long time to load and generates multiple server requests. Using image sprites will reduce the number of server requests and save bandwidth. With CSS, we can show just the part of the image we need.


RETINA IMAGE
The simplest way to make images appear "retina" (and optimize them for retina displays) is to define their width and height  values as only half of what the original file is.

================================================
BEFORE AND AFTER PSEUDO-ELEMENTS
Used to add something before or after a selected element. For the ::before and ::after to function properly, they must have a defined content property. This property is usually used to add things like a photo or text to the selected element.


================================================
@keyframes AND ANIMATION PROPERTIES
The animation properties control how the animation should behave and the @keyframes rule controls what happens during that animation. There are eight animation properties in total.

animation-name -> sets the name of the animation, which is later used by @keyframes to tell CSS which rules go with which animations

animation-duration -> sets the length of time for the animation

animation-fill-mode -> specifies the style applied to an element when the animation is finished
	. forwards

animation-iteration-count -> allows you to control how many times you would like to loop through the animation. To make the animation run continuously set the value to infinite.

animation-timing-function -> controls how quickly an animated element changes over the duration of the animation. Some predefined keywords available are:
	. ease (default) - starts slow, speeds up in the middle, and then slows down again in the end
	. ease-out - quick in the beginning then slows down
	. ease-in - is slow in the beginning, then speeds up at the end
	. linear - constant animation speed throughout
	. cubic-bezier - the shape of the curve represents how the animation plays out. The curve lives on a 1 by 1 coordinate system. The X-axis of this coordinate system is the duration of the animation, and the Y-axis is the change in the animation
		animation-timing-function: cubic-bezier(0, 1, 1, 0);


@keyframes -> specifies exactly what happens with the animation over the duration. This is done by giving CSS properties for specific "frames" during the animation, with percentages raging from 0% to 100%


#anim {
  animation-name: colorful;
  animation-duration: 3s;
}
@keyframes colorful {
  0% {
    background-color: blue;
  }
  100% {
    background-color: yellow;
  }
}


================================================
COLOR THEORY
The color wheel is a useful tool to visualize how colors relate to each other - it's a circle where similar hues are neighbors and different hues are farther apart. When two colors are opposite each other on the wheel, they are called complementary colors. They have the characteristic that if they are combined, they "cancel" each other out and create a gray color. However, when placed side-by-side, these colors appear more vibrant and produce a strong visual contrast.

Some examples of complementary colors with their hex codes are:

    red (#FF0000) and cyan (#00FFFF)
    green (#00FF00) and magenta (#FF00FF)
    blue (#0000FF) and yellow (#FFFF00)

Computer monitors and device screens create different colors by combining amounts of red, green, and blue light. This is known as the RGB additive color model in modern color theory. Red (R), green (G), and blue (B) are called primary colors. Mixing two primary colors creates the secondary colors cyan (G + B), magenta (R + B) and yellow (R + G). These secondary colors happen to be the complement to the primary color not used in their creation, and are opposite to that primary color on the color wheel. For example, magenta is made with red and blue, and is the complement to green.

Tertiary colors are the result of combining a primary color with one of its secondary color neighbors. For example, red (primary) and yellow (secondary) make orange. This adds six more colors to a simple color wheel for a total of twelve.

There are various methods of selecting different colors that result in a harmonious combination in design. One example that can use tertiary colors is called the split-complementary color scheme. This scheme starts with a base color, then pairs it with the two colors that are adjacent to its complement. The three colors provide strong visual contrast in a design, but are more subtle than using two complementary colors.

Opposite colors on the color wheel can make each other appear more vibrant when placed side-by-side. However, the strong visual contrast can be jarring if it's overused on a website, and can sometimes make text harder to read if it's placed on a complementary-colored background. In practice, one of the colors is usually dominant and the complement is used to bring visual attention to certain content on the page.

Close colors (neighbors on the color wheel) should be avoided when conveying important information, especially because of color-blind users.


================================================
MEDIA QUERY
Media queries are a new technique introduced in CSS3 that change the presentation of content based on different viewport sizes. If the media type matches the type of device the document is displayed on, the styles are applied. You can have as many selectors and styles inside the media query as you want.

Returns the content when the device is less than or equal to 100px:
@media (max-width: 100px) { /* CSS Rules */ }