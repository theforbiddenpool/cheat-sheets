Turn any HTML element into a grid container by setting display: grid.
Parent element → called container
Children elements → called items.

You need to define the structure of the grid.
• grid-template-columns or grid-template-rows → add some columns/rows to the grid. The number of parameters indicates the number of columns in the grid and the value the width of each column/row.
	e.g. 
	.container {
	  display: grid;
	  grid-template-columns: 50px 50px;
	}
	This will give the grid two columns that are 50px wide each.


CHANGE SIZE OF COLUMNS AND ROWS
◦ px, em, %
◦ fr: sets the column or row to a fraction of the available space
◦ auto: sets the column or row to the width or height to fit content automatically


• grid-column-gap → add a gap between the columns.
• grid-row-gap → add a gap between the rows.
• grid-gap → shorthand property. If it has one value, it will create a gap between all rows and columns. If there are two values, it will use the first one to set the gap between the rows and the second for the columns.


================================================
CONTROL SPACING
The hypothetical horizontal lines that create the grid are referred to as lines.

• grid-column → to control the amount of columns an item will consume, you can use the grid-column property in conjunction with the line numbers you want the item to start and stop at
	e.g. grid-column: 1 / 3;

• grid-row → define which rows the item consume


================================================
ALIGN AN ITEM HORIZONTALLY
In CSS Grid, the content of each item is located in a box which is referred to as a cell.

• justify-self → align the content's position within its cell horizontally.
	◦ stretch: default value. Will make the content fill the whole width of the cell
	◦ start: aligns the content at the left of the cell
	◦ center: aligns the content in the center of the cell
	◦ end: aligns the content at the right of the cell

• align-self → vertically align an the contents of an item. Accepts the same values as the justify-self property.

• justify-items → used on the grid container, aligns all items horizontally.

• align-items → used on the grid container, aligns all items vertically.


================================================
AREA TEMPLATES
You can group cells of your grid together into an area and give the area a custom name using grid-template-areas on the container.
	e.g. grid-template-areas:
		"header header header"
		"advert content content"
		"footer footer footer";
	(merges the top three cells together into an area named header, etc.)

Every word represents a cell and a every pair of " represents a row. You can use a period (.) to designate an empty cell in the grid.

After setting the areas, you can an item in the custom area using grid-area property on an item.
	e.g. .item1 { grid-area: header; }
If the grid doesn't have an areas template to reference, you can create an area on the fly.
	e.g. .item1 { grid-area: 1/1/2/4; }
			(h start / v start / h end / v end)
			

================================================
LIMIT ITEM SIZE
Used on grid-template-columns/rows, limits the size of items when the grid container changes size.
	e.g. grid-template-columns: 100px minmax(50px, 200px);
	

================================================
CREATING FLEXIBLE LAYOUTS
To avoid repetition, use repeat() function to create cells.
	e.g. grid-template-columns: repeat(100, 50px);
		 grid-template-columns: repeat(2, 1fr, 50px) 20px;
			(this translates into grid-template-columns: 1fr 50px 1fr 50px 20px;
			
• auto-fill → use auto-fill with minmax to automatically insert as many rows or columns of your desired size as possible.
	e.g. repeat(auto-fill, minmax(60px, 1fr));
	
• auto-fit → similar to auto-fill, but stops creating rows or columns when there are no more items, stretching the items to fit the size of the container.
	e.g. repeat(auto-fit, minmax(60px, 1fr));


You can use media-queries to rearrange the items on the grid as needed.


================================================
GRID WITHIN GRIDS
You can create a grid container within another using the display property on the item.