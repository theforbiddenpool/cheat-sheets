Sass adds features that aren't available using basic CSS syntax. It is a preprocessor â€“ takes code written using Sass syntax, and converts it into basic CSS.
There are two syntaxes available for Sass: SCSS, which is an extension of the syntax CSS, and indented syntax (or Sass), an older syntax.

SCSS
DECLARING A VARIABLE
$varname: value;

PARTIALS
Partials are separate files that hold segments of CSS code. There are imported and used in other Sass files. It's a great way to group similar code into a module to keep it organized.
Naming: _name.scss
Importing: @import 'name'

NESTING CSS
nav {
  ul {
    list-style: none
  }
}

MIXINS
They are basically functions for CSS.
@mixin name($var) {}
To call a mixin:
@import name(0);

PLACEHOLDER CLASS
Special type of class that only prints when it's extended.
%name-placeholder-class {}
To called it, use the @extend keyword.

EXTEND
Copies all properties from an element to another one.
@extend .panel;


LOGIC STATEMENTS
IF
@if $var == true {}
@else if $var == success {}
@else {}

FOR
You can use it in two ways: "start through end", which includes the end number, and "start to end", which excludes the end number.
@for $i from 1 through 12 {}
@for $j from 1 to 13 {}

EACH
Loops over each item in a list or map.
@each $color in blue, red, green {}
To use a map, the syntax is:
$colors: (color1: blue, color2: red, color3: green);
@each $key, $color in $colors {
  .#{$color}-text { color: $color; }
}

WHILE
$x : 1;
@while $x < 13 {
  .col-#{$x} { width: 100%/12 * $x; }
  $x: $x + 1;
}





